---
title: Data Preparation
slug: datapreparation
concepts:
  - working with files
  - data frames
  - data cleaning
  - data manipulation
  - data visualisation
contributors:
   - tpoisot
   - graciellehigino
weight: 1
status: draft
draft: true
---

In this module, we will download data as a csv file, read them, and peform a few
standard manipulations to re-organize the data. Julia offers a number of
packages to do this, but we will rely on the classic combination of
`DataFrames`, `DataFramesMeta`, and `Gadfly` for visualization.

```julia
import CSV
using DataFrames
using DataFramesMeta
import Dates
import Cairo, Fontconfig
using Gadfly
```

The data we will work on are observations of different species, from the *GBIF*
website. We have stored a copy on this website, so downloading them is easy:

```julia
tmp = download("https://sciencecomputing.io/data/observations.csv")
observations = DataFrame(CSV.File(tmp))
taxonomy = unique(select(observations, [:order, :family, :genus, :taxon]))
first(observations, 5)
```

Every row in this file is one observation of a species of bats. We can start by asking simple question, such as...


## When were the first and last observations for each species?

```julia
temporal = @linq observations |>
    # We are going to limit our analysis to the rows that are identified at the species level
    where(:rank .== "SPECIES") |>
    # And we are going to remove the rows for which the date is missing
    where(.!ismissing.(:date)) |>
    # With this subset of the DataFrame, we are going to group by species
    by(:taxon,
        # specifically, we want the most anciient and most recent date
        earliest = minimum(Dates.year.(:date)),
        latest = maximum(Dates.year.(:date))
        ) |>
    # Finally, we will focus on a subset of the columns
    # Note that we can CREATE a new column, i.e. span, the number of years over which
    # the species has been observed
    select(:taxon, :earliest, :latest, span = :latest - :earliest) |>
    # We will put the species observed first at the top of the DataFrame before
    # returning the data
    orderby(:earliest)

first(temporal, 5)
```

```julia
plot(temporal, x=:span, Geom.density, Coord.cartesian(xmin=0, xmax=250))
```

## Broadest latitudinal range by genus?

```julia
latitudes = @linq observations |>
    where(:rank .== "SPECIES") |>
    where(.!ismissing.(:latitude)) |>
    by(:genus, northern=maximum(:latitude), southern=minimum(:latitude), n=length(:latitude)) |>
    where(:n .> 10) |>
    select(:genus, range = :northern - :southern, records = :n) |>
    orderby(:range)

first(latitudes, 5)
```

## Number of observers for every species

```julia
observers = @linq observations |>
    where(:rank .== "SPECIES") |>
    where(.!ismissing.(:observer)) |>
    where(:observer .!= "Unknown") |>
    select(:taxon, :observer, :date) |>
    by(:taxon, observers = length(unique(:observer)), observations = length(:observer)) |>
    orderby(:observations)

first(observers, 5)
```

## Plot the number of observers vs. number of observations

```julia
plot(join(observers, taxonomy, on=:taxon), x=:observers, y=:observations, color=:family, label=:taxon, Geom.point, Geom.label, Scale.x_log10, Scale.y_log10)
```

## Stacking for dataviz

```julia
stacked_temporal = stack(temporal, [:earliest, :latest])
first(stacked_temporal, 5)
```

```julia
plot(stacked_temporal, x=:value, color=:variable, Geom.density, Coord.cartesian(xmin=1900, xmax=2020))
```