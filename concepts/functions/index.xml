<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>functions on</title><link>https://sciencecomputing.io/concepts/functions/</link><description>Recent content in functions on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sciencecomputing.io/concepts/functions/index.xml" rel="self" type="application/rss+xml"/><item><title>Returning functions</title><link>https://sciencecomputing.io/primers/returning_functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sciencecomputing.io/primers/returning_functions/</guid><description>In Julia, functions are objects like any other. This offers a number of interesting mechanisms, such as for example the ability for a function to return another function. Let&amp;rsquo;s use a simple example: the logistic map. It is defined by $x_{n+1} = a\times x_n\times(1-x_n)$, and $x_0 \in [0;1]$.
If we wanted to do this calculation, we could write a function that takes two arguments, a and x, and return a*x*(1.0-x). But there is no reason to expect that $a$ (a parameter) will change, so what we might want to do instead is return a function with a &amp;ldquo;built-in&amp;rdquo;.</description></item></channel></rss>