<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lessons on </title>
    <link>http://sciencecomputing.io/lessons/</link>
    <description>Recent content in Lessons on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://sciencecomputing.io/lessons/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Before we start...</title>
      <link>http://sciencecomputing.io/lessons/planning_ahead/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sciencecomputing.io/lessons/planning_ahead/</guid>
      <description>Programming is intimidating If your working environment looks anything like mine, the first thing you may see on a new project will look like this - an empty text editor, and an empty code interpreter. This is highly intimidating.
Facing an empty text editor at the beginning of a programming task is like facing an empty page at the beginning of a writing project. To make it easier to work through, one really good (but also really uncommon) approach is to walk away from the computer.</description>
    </item>
    
    <item>
      <title>The flow of execution</title>
      <link>http://sciencecomputing.io/lessons/control_flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sciencecomputing.io/lessons/control_flow/</guid>
      <description>Programming really is a language But if you understand three words, you will be able to hold a good conversation with your computer! These three words are if, for, and while. If you have some previous experience with writing code, you can skim through this lesson.
One great way to make your code robust is to keep it very simple, and one great way to keep your code very simple is to recognize that often, we want to do one of three things: do one thing if something happens (if), do one thing to a series of things (for), or do one thing until something happens (while).</description>
    </item>
    
    <item>
      <title>Writing functions</title>
      <link>http://sciencecomputing.io/lessons/writing_functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sciencecomputing.io/lessons/writing_functions/</guid>
      <description>Good code is small code In the previous lessons, we have seen how to express problems using for, if, and while. In this lesson, we will see how it is possible to wrap these instructions in functions. Functions allow you to write code that is modular, can easily be re-used, and (more importantly for us), can easily be tested, validated, and fixed.
Throughout this lesson, we will pay attention to decomposing a problem into a series of small parts.</description>
    </item>
    
    <item>
      <title>Avoiding mistakes</title>
      <link>http://sciencecomputing.io/lessons/avoiding_mistakes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sciencecomputing.io/lessons/avoiding_mistakes/</guid>
      <description>We can&amp;rsquo;t avoid mistakes But we can work as cautiously as possible, to make sure we catch them in time. It is always better to try and fail to run something, than to have the operation keep going and accumulating mistakes.
There are four types of mistakes to look out for: mistakes in the code, confusing interface, issues with arguments, and lack of integration. Some are caused by the programmer, and some are caused by the user.</description>
    </item>
    
  </channel>
</rss>